#include <iostream>
#include <stdexcept>  // For std::out_of_range

class DynamicArray {
private:
    int* data;       // Pointer to the array
    size_t size;     // Current number of elements
    size_t capacity; // Maximum number of elements before resizing

public:
    // Constructor to initialize the dynamic array with an initial size
    DynamicArray(size_t initial_capacity = 4)
        : size(0), capacity(initial_capacity) {
        data = new int[capacity]; // Allocate memory for the array
    }

    // Destructor to free the allocated memory
    ~DynamicArray() {
        delete[] data;
    }

    // Function to add an element to the array
    void push_back(int value) {
        // Resize if necessary (if the array is full)
        if (size == capacity) {
            resize(capacity * 2);  // Double the capacity
        }
        data[size++] = value;  // Add the new element and increment the size
    }

    // Function to access an element at a given index (with bounds checking)
    int& operator[](size_t index) {
        if (index >= size) {
            throw std::out_of_range("Index out of range");
        }
        return data[index];
    }

    // Function to get the size of the dynamic array
    size_t get_size() const {
        return size;
    }

    // Function to get the current capacity of the dynamic array
    size_t get_capacity() const {
        return capacity;
    }

private:
    // Function to resize the array when it is full
    void resize(size_t new_capacity) {
        // Allocate new memory with the new capacity
        int* new_data = new int[new_capacity];

        // Copy old data to the new memory
        for (size_t i = 0; i < size; ++i) {
            new_data[i] = data[i];
        }

        // Free the old memory
        delete[] data;

        // Update the data pointer to the new memory and set new capacity
        data = new_data;
        capacity = new_capacity;
    }
};

int main() {
    DynamicArray arr;

    // Add some elements to the dynamic array
    for (int i = 0; i < 10; ++i) {
        arr.push_back(i);
    }

    // Display the elements in the dynamic array
    for (size_t i = 0; i < arr.get_size(); ++i) {
        std::cout << arr[i] << " ";
    }
    std::cout << std::endl;

    // Display the current size and capacity
    std::cout << "Size: " << arr.get_size() << std::endl;
    std::cout << "Capacity: " << arr.get_capacity() << std::endl;

    return 0;
}
